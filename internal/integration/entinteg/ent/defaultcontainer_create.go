// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"ariga.io/atlas/integration/entinteg/ent/defaultcontainer"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DefaultContainerCreate is the builder for creating a DefaultContainer entity.
type DefaultContainerCreate struct {
	config
	mutation *DefaultContainerMutation
	hooks    []Hook
}

// SetStringdef sets the "stringdef" field.
func (dcc *DefaultContainerCreate) SetStringdef(s string) *DefaultContainerCreate {
	dcc.mutation.SetStringdef(s)
	return dcc
}

// SetNillableStringdef sets the "stringdef" field if the given value is not nil.
func (dcc *DefaultContainerCreate) SetNillableStringdef(s *string) *DefaultContainerCreate {
	if s != nil {
		dcc.SetStringdef(*s)
	}
	return dcc
}

// SetInt sets the "int" field.
func (dcc *DefaultContainerCreate) SetInt(i int) *DefaultContainerCreate {
	dcc.mutation.SetInt(i)
	return dcc
}

// SetNillableInt sets the "int" field if the given value is not nil.
func (dcc *DefaultContainerCreate) SetNillableInt(i *int) *DefaultContainerCreate {
	if i != nil {
		dcc.SetInt(*i)
	}
	return dcc
}

// SetBool sets the "bool" field.
func (dcc *DefaultContainerCreate) SetBool(b bool) *DefaultContainerCreate {
	dcc.mutation.SetBool(b)
	return dcc
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (dcc *DefaultContainerCreate) SetNillableBool(b *bool) *DefaultContainerCreate {
	if b != nil {
		dcc.SetBool(*b)
	}
	return dcc
}

// SetEnum sets the "enum" field.
func (dcc *DefaultContainerCreate) SetEnum(d defaultcontainer.Enum) *DefaultContainerCreate {
	dcc.mutation.SetEnum(d)
	return dcc
}

// SetNillableEnum sets the "enum" field if the given value is not nil.
func (dcc *DefaultContainerCreate) SetNillableEnum(d *defaultcontainer.Enum) *DefaultContainerCreate {
	if d != nil {
		dcc.SetEnum(*d)
	}
	return dcc
}

// SetFloat sets the "float" field.
func (dcc *DefaultContainerCreate) SetFloat(f float64) *DefaultContainerCreate {
	dcc.mutation.SetFloat(f)
	return dcc
}

// SetNillableFloat sets the "float" field if the given value is not nil.
func (dcc *DefaultContainerCreate) SetNillableFloat(f *float64) *DefaultContainerCreate {
	if f != nil {
		dcc.SetFloat(*f)
	}
	return dcc
}

// Mutation returns the DefaultContainerMutation object of the builder.
func (dcc *DefaultContainerCreate) Mutation() *DefaultContainerMutation {
	return dcc.mutation
}

// Save creates the DefaultContainer in the database.
func (dcc *DefaultContainerCreate) Save(ctx context.Context) (*DefaultContainer, error) {
	var (
		err  error
		node *DefaultContainer
	)
	dcc.defaults()
	if len(dcc.hooks) == 0 {
		if err = dcc.check(); err != nil {
			return nil, err
		}
		node, err = dcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DefaultContainerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcc.check(); err != nil {
				return nil, err
			}
			dcc.mutation = mutation
			node, err = dcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dcc.hooks) - 1; i >= 0; i-- {
			mut = dcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DefaultContainerCreate) SaveX(ctx context.Context) *DefaultContainer {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (dcc *DefaultContainerCreate) defaults() {
	if _, ok := dcc.mutation.Stringdef(); !ok {
		v := defaultcontainer.DefaultStringdef
		dcc.mutation.SetStringdef(v)
	}
	if _, ok := dcc.mutation.Int(); !ok {
		v := defaultcontainer.DefaultInt
		dcc.mutation.SetInt(v)
	}
	if _, ok := dcc.mutation.Bool(); !ok {
		v := defaultcontainer.DefaultBool
		dcc.mutation.SetBool(v)
	}
	if _, ok := dcc.mutation.Enum(); !ok {
		v := defaultcontainer.DefaultEnum
		dcc.mutation.SetEnum(v)
	}
	if _, ok := dcc.mutation.Float(); !ok {
		v := defaultcontainer.DefaultFloat
		dcc.mutation.SetFloat(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DefaultContainerCreate) check() error {
	if _, ok := dcc.mutation.Stringdef(); !ok {
		return &ValidationError{Name: "stringdef", err: errors.New("ent: missing required field \"stringdef\"")}
	}
	if _, ok := dcc.mutation.Int(); !ok {
		return &ValidationError{Name: "int", err: errors.New("ent: missing required field \"int\"")}
	}
	if _, ok := dcc.mutation.Bool(); !ok {
		return &ValidationError{Name: "bool", err: errors.New("ent: missing required field \"bool\"")}
	}
	if _, ok := dcc.mutation.Enum(); !ok {
		return &ValidationError{Name: "enum", err: errors.New("ent: missing required field \"enum\"")}
	}
	if v, ok := dcc.mutation.Enum(); ok {
		if err := defaultcontainer.EnumValidator(v); err != nil {
			return &ValidationError{Name: "enum", err: fmt.Errorf("ent: validator failed for field \"enum\": %w", err)}
		}
	}
	if _, ok := dcc.mutation.Float(); !ok {
		return &ValidationError{Name: "float", err: errors.New("ent: missing required field \"float\"")}
	}
	return nil
}

func (dcc *DefaultContainerCreate) sqlSave(ctx context.Context) (*DefaultContainer, error) {
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dcc *DefaultContainerCreate) createSpec() (*DefaultContainer, *sqlgraph.CreateSpec) {
	var (
		_node = &DefaultContainer{config: dcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: defaultcontainer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: defaultcontainer.FieldID,
			},
		}
	)
	if value, ok := dcc.mutation.Stringdef(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: defaultcontainer.FieldStringdef,
		})
		_node.Stringdef = value
	}
	if value, ok := dcc.mutation.Int(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: defaultcontainer.FieldInt,
		})
		_node.Int = value
	}
	if value, ok := dcc.mutation.Bool(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: defaultcontainer.FieldBool,
		})
		_node.Bool = value
	}
	if value, ok := dcc.mutation.Enum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: defaultcontainer.FieldEnum,
		})
		_node.Enum = value
	}
	if value, ok := dcc.mutation.Float(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: defaultcontainer.FieldFloat,
		})
		_node.Float = value
	}
	return _node, _spec
}

// DefaultContainerCreateBulk is the builder for creating many DefaultContainer entities in bulk.
type DefaultContainerCreateBulk struct {
	config
	builders []*DefaultContainerCreate
}

// Save creates the DefaultContainer entities in the database.
func (dccb *DefaultContainerCreateBulk) Save(ctx context.Context) ([]*DefaultContainer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DefaultContainer, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DefaultContainerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DefaultContainerCreateBulk) SaveX(ctx context.Context) []*DefaultContainer {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
