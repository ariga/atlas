// Code generated by entc, DO NOT EDIT.

package defaultcontainer

import (
	"ariga.io/atlas/integration/entinteg/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Stringdef applies equality check predicate on the "stringdef" field. It's identical to StringdefEQ.
func Stringdef(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringdef), v))
	})
}

// Int applies equality check predicate on the "int" field. It's identical to IntEQ.
func Int(v int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInt), v))
	})
}

// Bool applies equality check predicate on the "bool" field. It's identical to BoolEQ.
func Bool(v bool) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBool), v))
	})
}

// Float applies equality check predicate on the "float" field. It's identical to FloatEQ.
func Float(v float64) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloat), v))
	})
}

// StringdefEQ applies the EQ predicate on the "stringdef" field.
func StringdefEQ(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStringdef), v))
	})
}

// StringdefNEQ applies the NEQ predicate on the "stringdef" field.
func StringdefNEQ(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStringdef), v))
	})
}

// StringdefIn applies the In predicate on the "stringdef" field.
func StringdefIn(vs ...string) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStringdef), v...))
	})
}

// StringdefNotIn applies the NotIn predicate on the "stringdef" field.
func StringdefNotIn(vs ...string) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStringdef), v...))
	})
}

// StringdefGT applies the GT predicate on the "stringdef" field.
func StringdefGT(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStringdef), v))
	})
}

// StringdefGTE applies the GTE predicate on the "stringdef" field.
func StringdefGTE(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStringdef), v))
	})
}

// StringdefLT applies the LT predicate on the "stringdef" field.
func StringdefLT(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStringdef), v))
	})
}

// StringdefLTE applies the LTE predicate on the "stringdef" field.
func StringdefLTE(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStringdef), v))
	})
}

// StringdefContains applies the Contains predicate on the "stringdef" field.
func StringdefContains(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStringdef), v))
	})
}

// StringdefHasPrefix applies the HasPrefix predicate on the "stringdef" field.
func StringdefHasPrefix(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStringdef), v))
	})
}

// StringdefHasSuffix applies the HasSuffix predicate on the "stringdef" field.
func StringdefHasSuffix(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStringdef), v))
	})
}

// StringdefEqualFold applies the EqualFold predicate on the "stringdef" field.
func StringdefEqualFold(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStringdef), v))
	})
}

// StringdefContainsFold applies the ContainsFold predicate on the "stringdef" field.
func StringdefContainsFold(v string) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStringdef), v))
	})
}

// IntEQ applies the EQ predicate on the "int" field.
func IntEQ(v int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInt), v))
	})
}

// IntNEQ applies the NEQ predicate on the "int" field.
func IntNEQ(v int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInt), v))
	})
}

// IntIn applies the In predicate on the "int" field.
func IntIn(vs ...int) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInt), v...))
	})
}

// IntNotIn applies the NotIn predicate on the "int" field.
func IntNotIn(vs ...int) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInt), v...))
	})
}

// IntGT applies the GT predicate on the "int" field.
func IntGT(v int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInt), v))
	})
}

// IntGTE applies the GTE predicate on the "int" field.
func IntGTE(v int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInt), v))
	})
}

// IntLT applies the LT predicate on the "int" field.
func IntLT(v int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInt), v))
	})
}

// IntLTE applies the LTE predicate on the "int" field.
func IntLTE(v int) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInt), v))
	})
}

// BoolEQ applies the EQ predicate on the "bool" field.
func BoolEQ(v bool) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBool), v))
	})
}

// BoolNEQ applies the NEQ predicate on the "bool" field.
func BoolNEQ(v bool) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBool), v))
	})
}

// EnumEQ applies the EQ predicate on the "enum" field.
func EnumEQ(v Enum) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnum), v))
	})
}

// EnumNEQ applies the NEQ predicate on the "enum" field.
func EnumNEQ(v Enum) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnum), v))
	})
}

// EnumIn applies the In predicate on the "enum" field.
func EnumIn(vs ...Enum) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnum), v...))
	})
}

// EnumNotIn applies the NotIn predicate on the "enum" field.
func EnumNotIn(vs ...Enum) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnum), v...))
	})
}

// FloatEQ applies the EQ predicate on the "float" field.
func FloatEQ(v float64) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFloat), v))
	})
}

// FloatNEQ applies the NEQ predicate on the "float" field.
func FloatNEQ(v float64) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFloat), v))
	})
}

// FloatIn applies the In predicate on the "float" field.
func FloatIn(vs ...float64) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFloat), v...))
	})
}

// FloatNotIn applies the NotIn predicate on the "float" field.
func FloatNotIn(vs ...float64) predicate.DefaultContainer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DefaultContainer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFloat), v...))
	})
}

// FloatGT applies the GT predicate on the "float" field.
func FloatGT(v float64) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFloat), v))
	})
}

// FloatGTE applies the GTE predicate on the "float" field.
func FloatGTE(v float64) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFloat), v))
	})
}

// FloatLT applies the LT predicate on the "float" field.
func FloatLT(v float64) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFloat), v))
	})
}

// FloatLTE applies the LTE predicate on the "float" field.
func FloatLTE(v float64) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFloat), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DefaultContainer) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DefaultContainer) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DefaultContainer) predicate.DefaultContainer {
	return predicate.DefaultContainer(func(s *sql.Selector) {
		p(s.Not())
	})
}
