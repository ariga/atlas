// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"ariga.io/atlas/integration/entinteg/ent/defaultcontainer"
	"entgo.io/ent/dialect/sql"
)

// DefaultContainer is the model entity for the DefaultContainer schema.
type DefaultContainer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Stringdef holds the value of the "stringdef" field.
	Stringdef string `json:"stringdef,omitempty"`
	// Int holds the value of the "int" field.
	Int int `json:"int,omitempty"`
	// Bool holds the value of the "bool" field.
	Bool bool `json:"bool,omitempty"`
	// Enum holds the value of the "enum" field.
	Enum defaultcontainer.Enum `json:"enum,omitempty"`
	// Float holds the value of the "float" field.
	Float float64 `json:"float,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DefaultContainer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case defaultcontainer.FieldBool:
			values[i] = new(sql.NullBool)
		case defaultcontainer.FieldFloat:
			values[i] = new(sql.NullFloat64)
		case defaultcontainer.FieldID, defaultcontainer.FieldInt:
			values[i] = new(sql.NullInt64)
		case defaultcontainer.FieldStringdef, defaultcontainer.FieldEnum:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DefaultContainer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DefaultContainer fields.
func (dc *DefaultContainer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case defaultcontainer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dc.ID = int(value.Int64)
		case defaultcontainer.FieldStringdef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stringdef", values[i])
			} else if value.Valid {
				dc.Stringdef = value.String
			}
		case defaultcontainer.FieldInt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int", values[i])
			} else if value.Valid {
				dc.Int = int(value.Int64)
			}
		case defaultcontainer.FieldBool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bool", values[i])
			} else if value.Valid {
				dc.Bool = value.Bool
			}
		case defaultcontainer.FieldEnum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field enum", values[i])
			} else if value.Valid {
				dc.Enum = defaultcontainer.Enum(value.String)
			}
		case defaultcontainer.FieldFloat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field float", values[i])
			} else if value.Valid {
				dc.Float = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DefaultContainer.
// Note that you need to call DefaultContainer.Unwrap() before calling this method if this DefaultContainer
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DefaultContainer) Update() *DefaultContainerUpdateOne {
	return (&DefaultContainerClient{config: dc.config}).UpdateOne(dc)
}

// Unwrap unwraps the DefaultContainer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DefaultContainer) Unwrap() *DefaultContainer {
	tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DefaultContainer is not a transactional entity")
	}
	dc.config.driver = tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DefaultContainer) String() string {
	var builder strings.Builder
	builder.WriteString("DefaultContainer(")
	builder.WriteString(fmt.Sprintf("id=%v", dc.ID))
	builder.WriteString(", stringdef=")
	builder.WriteString(dc.Stringdef)
	builder.WriteString(", int=")
	builder.WriteString(fmt.Sprintf("%v", dc.Int))
	builder.WriteString(", bool=")
	builder.WriteString(fmt.Sprintf("%v", dc.Bool))
	builder.WriteString(", enum=")
	builder.WriteString(fmt.Sprintf("%v", dc.Enum))
	builder.WriteString(", float=")
	builder.WriteString(fmt.Sprintf("%v", dc.Float))
	builder.WriteByte(')')
	return builder.String()
}

// DefaultContainers is a parsable slice of DefaultContainer.
type DefaultContainers []*DefaultContainer

func (dc DefaultContainers) config(cfg config) {
	for _i := range dc {
		dc[_i].config = cfg
	}
}
