// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"ariga.io/atlas/integration/entinteg/ent/defaultcontainer"
	"ariga.io/atlas/integration/entinteg/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DefaultContainerUpdate is the builder for updating DefaultContainer entities.
type DefaultContainerUpdate struct {
	config
	hooks    []Hook
	mutation *DefaultContainerMutation
}

// Where adds a new predicate for the DefaultContainerUpdate builder.
func (dcu *DefaultContainerUpdate) Where(ps ...predicate.DefaultContainer) *DefaultContainerUpdate {
	dcu.mutation.predicates = append(dcu.mutation.predicates, ps...)
	return dcu
}

// SetStringdef sets the "stringdef" field.
func (dcu *DefaultContainerUpdate) SetStringdef(s string) *DefaultContainerUpdate {
	dcu.mutation.SetStringdef(s)
	return dcu
}

// SetNillableStringdef sets the "stringdef" field if the given value is not nil.
func (dcu *DefaultContainerUpdate) SetNillableStringdef(s *string) *DefaultContainerUpdate {
	if s != nil {
		dcu.SetStringdef(*s)
	}
	return dcu
}

// SetInt sets the "int" field.
func (dcu *DefaultContainerUpdate) SetInt(i int) *DefaultContainerUpdate {
	dcu.mutation.ResetInt()
	dcu.mutation.SetInt(i)
	return dcu
}

// SetNillableInt sets the "int" field if the given value is not nil.
func (dcu *DefaultContainerUpdate) SetNillableInt(i *int) *DefaultContainerUpdate {
	if i != nil {
		dcu.SetInt(*i)
	}
	return dcu
}

// AddInt adds i to the "int" field.
func (dcu *DefaultContainerUpdate) AddInt(i int) *DefaultContainerUpdate {
	dcu.mutation.AddInt(i)
	return dcu
}

// SetBool sets the "bool" field.
func (dcu *DefaultContainerUpdate) SetBool(b bool) *DefaultContainerUpdate {
	dcu.mutation.SetBool(b)
	return dcu
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (dcu *DefaultContainerUpdate) SetNillableBool(b *bool) *DefaultContainerUpdate {
	if b != nil {
		dcu.SetBool(*b)
	}
	return dcu
}

// SetEnum sets the "enum" field.
func (dcu *DefaultContainerUpdate) SetEnum(d defaultcontainer.Enum) *DefaultContainerUpdate {
	dcu.mutation.SetEnum(d)
	return dcu
}

// SetNillableEnum sets the "enum" field if the given value is not nil.
func (dcu *DefaultContainerUpdate) SetNillableEnum(d *defaultcontainer.Enum) *DefaultContainerUpdate {
	if d != nil {
		dcu.SetEnum(*d)
	}
	return dcu
}

// SetFloat sets the "float" field.
func (dcu *DefaultContainerUpdate) SetFloat(f float64) *DefaultContainerUpdate {
	dcu.mutation.ResetFloat()
	dcu.mutation.SetFloat(f)
	return dcu
}

// SetNillableFloat sets the "float" field if the given value is not nil.
func (dcu *DefaultContainerUpdate) SetNillableFloat(f *float64) *DefaultContainerUpdate {
	if f != nil {
		dcu.SetFloat(*f)
	}
	return dcu
}

// AddFloat adds f to the "float" field.
func (dcu *DefaultContainerUpdate) AddFloat(f float64) *DefaultContainerUpdate {
	dcu.mutation.AddFloat(f)
	return dcu
}

// Mutation returns the DefaultContainerMutation object of the builder.
func (dcu *DefaultContainerUpdate) Mutation() *DefaultContainerMutation {
	return dcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DefaultContainerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dcu.hooks) == 0 {
		if err = dcu.check(); err != nil {
			return 0, err
		}
		affected, err = dcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DefaultContainerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcu.check(); err != nil {
				return 0, err
			}
			dcu.mutation = mutation
			affected, err = dcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dcu.hooks) - 1; i >= 0; i-- {
			mut = dcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DefaultContainerUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DefaultContainerUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DefaultContainerUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DefaultContainerUpdate) check() error {
	if v, ok := dcu.mutation.Enum(); ok {
		if err := defaultcontainer.EnumValidator(v); err != nil {
			return &ValidationError{Name: "enum", err: fmt.Errorf("ent: validator failed for field \"enum\": %w", err)}
		}
	}
	return nil
}

func (dcu *DefaultContainerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   defaultcontainer.Table,
			Columns: defaultcontainer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: defaultcontainer.FieldID,
			},
		},
	}
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.Stringdef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: defaultcontainer.FieldStringdef,
		})
	}
	if value, ok := dcu.mutation.Int(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: defaultcontainer.FieldInt,
		})
	}
	if value, ok := dcu.mutation.AddedInt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: defaultcontainer.FieldInt,
		})
	}
	if value, ok := dcu.mutation.Bool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: defaultcontainer.FieldBool,
		})
	}
	if value, ok := dcu.mutation.Enum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: defaultcontainer.FieldEnum,
		})
	}
	if value, ok := dcu.mutation.Float(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: defaultcontainer.FieldFloat,
		})
	}
	if value, ok := dcu.mutation.AddedFloat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: defaultcontainer.FieldFloat,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaultcontainer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DefaultContainerUpdateOne is the builder for updating a single DefaultContainer entity.
type DefaultContainerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DefaultContainerMutation
}

// SetStringdef sets the "stringdef" field.
func (dcuo *DefaultContainerUpdateOne) SetStringdef(s string) *DefaultContainerUpdateOne {
	dcuo.mutation.SetStringdef(s)
	return dcuo
}

// SetNillableStringdef sets the "stringdef" field if the given value is not nil.
func (dcuo *DefaultContainerUpdateOne) SetNillableStringdef(s *string) *DefaultContainerUpdateOne {
	if s != nil {
		dcuo.SetStringdef(*s)
	}
	return dcuo
}

// SetInt sets the "int" field.
func (dcuo *DefaultContainerUpdateOne) SetInt(i int) *DefaultContainerUpdateOne {
	dcuo.mutation.ResetInt()
	dcuo.mutation.SetInt(i)
	return dcuo
}

// SetNillableInt sets the "int" field if the given value is not nil.
func (dcuo *DefaultContainerUpdateOne) SetNillableInt(i *int) *DefaultContainerUpdateOne {
	if i != nil {
		dcuo.SetInt(*i)
	}
	return dcuo
}

// AddInt adds i to the "int" field.
func (dcuo *DefaultContainerUpdateOne) AddInt(i int) *DefaultContainerUpdateOne {
	dcuo.mutation.AddInt(i)
	return dcuo
}

// SetBool sets the "bool" field.
func (dcuo *DefaultContainerUpdateOne) SetBool(b bool) *DefaultContainerUpdateOne {
	dcuo.mutation.SetBool(b)
	return dcuo
}

// SetNillableBool sets the "bool" field if the given value is not nil.
func (dcuo *DefaultContainerUpdateOne) SetNillableBool(b *bool) *DefaultContainerUpdateOne {
	if b != nil {
		dcuo.SetBool(*b)
	}
	return dcuo
}

// SetEnum sets the "enum" field.
func (dcuo *DefaultContainerUpdateOne) SetEnum(d defaultcontainer.Enum) *DefaultContainerUpdateOne {
	dcuo.mutation.SetEnum(d)
	return dcuo
}

// SetNillableEnum sets the "enum" field if the given value is not nil.
func (dcuo *DefaultContainerUpdateOne) SetNillableEnum(d *defaultcontainer.Enum) *DefaultContainerUpdateOne {
	if d != nil {
		dcuo.SetEnum(*d)
	}
	return dcuo
}

// SetFloat sets the "float" field.
func (dcuo *DefaultContainerUpdateOne) SetFloat(f float64) *DefaultContainerUpdateOne {
	dcuo.mutation.ResetFloat()
	dcuo.mutation.SetFloat(f)
	return dcuo
}

// SetNillableFloat sets the "float" field if the given value is not nil.
func (dcuo *DefaultContainerUpdateOne) SetNillableFloat(f *float64) *DefaultContainerUpdateOne {
	if f != nil {
		dcuo.SetFloat(*f)
	}
	return dcuo
}

// AddFloat adds f to the "float" field.
func (dcuo *DefaultContainerUpdateOne) AddFloat(f float64) *DefaultContainerUpdateOne {
	dcuo.mutation.AddFloat(f)
	return dcuo
}

// Mutation returns the DefaultContainerMutation object of the builder.
func (dcuo *DefaultContainerUpdateOne) Mutation() *DefaultContainerMutation {
	return dcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DefaultContainerUpdateOne) Select(field string, fields ...string) *DefaultContainerUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DefaultContainer entity.
func (dcuo *DefaultContainerUpdateOne) Save(ctx context.Context) (*DefaultContainer, error) {
	var (
		err  error
		node *DefaultContainer
	)
	if len(dcuo.hooks) == 0 {
		if err = dcuo.check(); err != nil {
			return nil, err
		}
		node, err = dcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DefaultContainerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcuo.check(); err != nil {
				return nil, err
			}
			dcuo.mutation = mutation
			node, err = dcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dcuo.hooks) - 1; i >= 0; i-- {
			mut = dcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DefaultContainerUpdateOne) SaveX(ctx context.Context) *DefaultContainer {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DefaultContainerUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DefaultContainerUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DefaultContainerUpdateOne) check() error {
	if v, ok := dcuo.mutation.Enum(); ok {
		if err := defaultcontainer.EnumValidator(v); err != nil {
			return &ValidationError{Name: "enum", err: fmt.Errorf("ent: validator failed for field \"enum\": %w", err)}
		}
	}
	return nil
}

func (dcuo *DefaultContainerUpdateOne) sqlSave(ctx context.Context) (_node *DefaultContainer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   defaultcontainer.Table,
			Columns: defaultcontainer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: defaultcontainer.FieldID,
			},
		},
	}
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DefaultContainer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, defaultcontainer.FieldID)
		for _, f := range fields {
			if !defaultcontainer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != defaultcontainer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.Stringdef(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: defaultcontainer.FieldStringdef,
		})
	}
	if value, ok := dcuo.mutation.Int(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: defaultcontainer.FieldInt,
		})
	}
	if value, ok := dcuo.mutation.AddedInt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: defaultcontainer.FieldInt,
		})
	}
	if value, ok := dcuo.mutation.Bool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: defaultcontainer.FieldBool,
		})
	}
	if value, ok := dcuo.mutation.Enum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: defaultcontainer.FieldEnum,
		})
	}
	if value, ok := dcuo.mutation.Float(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: defaultcontainer.FieldFloat,
		})
	}
	if value, ok := dcuo.mutation.AddedFloat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: defaultcontainer.FieldFloat,
		})
	}
	_node = &DefaultContainer{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{defaultcontainer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
