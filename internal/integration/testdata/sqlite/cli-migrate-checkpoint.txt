atlas migrate hash

# Apply only one file.
atlas migrate apply 1 --url sqlite://first.db
stdout 'Migrating to version 1 \(1 migrations in total\):'
atlas migrate status --url sqlite://first.db
stdout 'Migration Status: PENDING'
stdout '-- Current Version: 1'
stdout '-- Next Version:    2'
stdout '-- Executed Files:  1'
stdout '-- Pending Files:   1'

# Create a checkpoint file.
atlas migrate checkpoint --dev-url sqlite://dev?mode=memory

# Existing databases should not be affected by the checkpoint file.
atlas migrate status --url sqlite://first.db
stdout 'Migration Status: PENDING'
stdout '-- Current Version: 1'
stdout '-- Next Version:    2'
stdout '-- Executed Files:  1'
stdout '-- Pending Files:   1'

# Apply only one file and check status.
atlas migrate apply --url sqlite://first.db
stdout 'Migrating to version 2 from 1 \(1 migrations in total\):'
atlas migrate status --url sqlite://first.db
stdout 'Migration Status: OK'
stdout '-- Current Version: 2'
stdout '-- Next Version:    Already at latest version'
stdout '-- Executed Files:  2'
stdout '-- Pending Files:   0'

# Check the status of a new database.
atlas migrate status --url sqlite://second.db
stdout 'Migration Status: PENDING'
stdout '-- Current Version: No migration applied yet'
stdout '-- Next Version:    \d+ \(checkpoint\)' # Checkpoint timestamp.
stdout '-- Executed Files:  0'
stdout '-- Pending Files:   1'

# Applying migrations on new databases should start from checkpoint.
atlas migrate apply --url sqlite://second.db
stdout 'Migrating to version \d+ \(1 migrations in total\):' # Checkpoint timestamp.
stdout '-- migrating version \d+'
stdout '-> CREATE TABLE `t1` \(`c` int NULL\);'
stdout '-> CREATE TABLE `t2` \(`c` int NULL\);'

# Check the status after applying.
atlas migrate status --url sqlite://second.db
stdout 'Migration Status: OK'

# Append a new migration file after the checkpoint.
cp after_checkpoint.sql migrations/90000000000000.sql
atlas migrate hash

# Check the status of first database after appending.
atlas migrate status --url sqlite://first.db
stdout 'Migration Status: PENDING'
stdout '-- Current Version: 2'
stdout '-- Next Version:    90000000000000'
stdout '-- Executed Files:  2'
stdout '-- Pending Files:   1'
# Apply all pending migrations.
atlas migrate apply --url sqlite://first.db
stdout 'Migrating to version 90000000000000 from 2 \(1 migrations in total\):'
# Check the status after applying.
atlas migrate status --url sqlite://first.db
stdout 'Migration Status: OK'

# Check the status of second database after appending.
atlas migrate status --url sqlite://second.db
stdout 'Migration Status: PENDING'
stdout '-- Current Version: \d+' # Checkpoint timestamp.
stdout '-- Next Version:    90000000000000'
stdout '-- Executed Files:  1'
stdout '-- Pending Files:   1'
# Apply all pending migrations.
atlas migrate apply --url sqlite://second.db
stdout 'Migrating to version 90000000000000 from \d+ \(1 migrations in total\):' # Checkpoint timestamp.
# Check the status after applying.
atlas migrate status --url sqlite://second.db
stdout 'Migration Status: OK'

-- migrations/1.sql --
CREATE TABLE t1(c int);
-- migrations/2.sql --
CREATE TABLE t2(c int);
-- after_checkpoint.sql --
CREATE TABLE t3(c int);