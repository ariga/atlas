// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go ariga.io/atlas/sql/schema

package schema

// A NotExistError wraps another error to retain its original text
// but makes it possible to the migrator to catch it.
#NotExistError: {
	Err: _ @go(,error)
}

// ExecQuerier wraps the two standard sql.DB methods.
#ExecQuerier: _

// An InspectMode controls the amount and depth of information returned on inspection.
#InspectMode: uint // #enumInspectMode

#enumInspectMode:
	#InspectSchemas |
	#InspectTables

#values_InspectMode: {
	InspectSchemas: #InspectSchemas
	InspectTables:  #InspectTables
}

// InspectSchemas enables schema inspection.
#InspectSchemas: #InspectMode & 1

// InspectTables enables schema tables inspection including
// all its child resources (e.g. columns or indexes).
#InspectTables: #InspectMode & 2

#InspectOptions: {
	// Mode defines the amount of information returned by InspectSchema.
	// If zero, InspectSchema inspects whole resources in the schema.
	Mode: #InspectMode

	// Tables to inspect. Empty means all tables in the schema.
	Tables: [...string] @go(,[]string)

	// Exclude defines a list of glob patterns used to filter resources from inspection.
	// The syntax used by the different drivers is implemented as follows:
	//
	// t   // exclude table 't'.
	// *   // exclude all tables.
	// t.c // exclude column, index and foreign-key named 'c' in table 't'.
	// t.* // the last item defines the filtering; all resources under 't' are excluded.
	// *.c // the last item defines the filtering; all resourced named 'c' are excluded in all tables.
	// *.* // the last item defines the filtering; all resourced under all tables are excluded.
	//
	Exclude: [...string] @go(,[]string)
}

#InspectRealmOption: {
	// Mode defines the amount of information returned by InspectRealm.
	// If zero, InspectRealm inspects all schemas and their child resources.
	Mode: #InspectMode

	// Schemas to inspect. Empty means all schemas in the realm.
	Schemas: [...string] @go(,[]string)

	// Exclude defines a list of glob patterns used to filter resources from inspection.
	// The syntax used by the different drivers is implemented as follows:
	//
	// s     // exclude schema 't'.
	// *     // exclude all schemas.
	// s.t   // exclude table 't' under schema 's'.
	// s.*   // the last item defines the filtering; all tables under 's' are excluded.
	// *.t   // the last item defines the filtering; all tables named 't' are excluded in all schemas.
	// *.*   // the last item defines the filtering; all tables under all schemas are excluded.
	// *.*.c // the last item defines the filtering; all resourced named 'c' are excluded in all tables.
	// *.*.* // the last item defines the filtering; all resources are excluded in all tables.
	//
	Exclude: [...string] @go(,[]string)
}

#Inspector: _

// Normalizer is the interface implemented by the different database drivers for
// "normalizing" schema objects. i.e. converting schema objects defined in natural
// form to their representation in the database. Thus, two schema objects are equal
// if their normal forms are equal.
#Normalizer: _
