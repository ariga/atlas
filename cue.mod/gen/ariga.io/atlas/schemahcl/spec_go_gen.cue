// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go ariga.io/atlas/schemahcl

package schemahcl

import "reflect"

#Resource: {
	Name:      string
	Qualifier: string
	Type:      string
	Attrs: [...null | #Attr] @go(,[]*Attr)
	Children: [...null | #Resource] @go(,[]*Resource)
}

#Attr: K: string

#Ref: V: string

#RawExpr: X: string

#TypeSpec: {
	// Name is the identifier for the type in an Atlas DDL document.
	Name: string

	// T is the database identifier for the type.
	T: string
	Attributes: [...null | #TypeAttr] @go(,[]*TypeAttr)

	// RType is the reflect.Type of the schema.Type used to describe the TypeSpec.
	// This field is optional and used to determine the TypeSpec in cases where the
	// schema.Type does not have a `T` field.
	RType: reflect.#Type
}

#TypeAttr: {
	// Name should be a snake_case of related the schema.Type struct field.
	Name:     string
	Kind:     reflect.#Kind
	Required: bool
}

#Type: {
	T: string
	Attrs: [...null | #Attr] @go(,[]*Attr)
	IsRef: bool
}
