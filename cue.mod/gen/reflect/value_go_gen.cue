// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go reflect

package reflect

_#flag: uint64

_#flagKindWidth:   5
_#flagKindMask:    _#flag & 31
_#flagStickyRO:    _#flag & 32
_#flagEmbedRO:     _#flag & 64
_#flagIndir:       _#flag & 128
_#flagAddr:        _#flag & 256
_#flagMethod:      _#flag & 512
_#flagMethodShift: 10
_#flagRO:          _#flag & 96

// A ValueError occurs when a Value method is invoked on
// a Value that does not support it. Such cases are documented
// in the description of each method.
#ValueError: {
	Method: string
	Kind:   #Kind
}

_#debugReflectCall: false

// hiter's structure matches runtime.hiter's structure.
// Having a clone here allows us to embed a map iterator
// inside type MapIter so that MapIters can be re-used
// without doing any allocations.
_#hiter: {
	B: uint8
}

// StringHeader is the runtime representation of a string.
// It cannot be used safely or portably and its representation may
// change in a later release.
// Moreover, the Data field is not sufficient to guarantee the data
// it references will not be garbage collected, so programs must keep
// a separate, correctly typed pointer to the underlying data.
#StringHeader: {
	Data: uint64 @go(,uintptr)
	Len:  int
}

// SliceHeader is the runtime representation of a slice.
// It cannot be used safely or portably and its representation may
// change in a later release.
// Moreover, the Data field is not sufficient to guarantee the data
// it references will not be garbage collected, so programs must keep
// a separate, correctly typed pointer to the underlying data.
#SliceHeader: {
	Data: uint64 @go(,uintptr)
	Len:  int
	Cap:  int
}

// A SelectDir describes the communication direction of a select case.
#SelectDir: int // #enumSelectDir

#enumSelectDir:
	#SelectSend |
	#SelectRecv |
	#SelectDefault

#values_SelectDir: {
	SelectSend:    #SelectSend
	SelectRecv:    #SelectRecv
	SelectDefault: #SelectDefault
}
#SelectSend:    #SelectDir & 1
#SelectRecv:    #SelectDir & 2
#SelectDefault: #SelectDir & 3

// A SelectCase describes a single case in a select operation.
// The kind of case depends on Dir, the communication direction.
//
// If Dir is SelectDefault, the case represents a default case.
// Chan and Send must be zero Values.
//
// If Dir is SelectSend, the case represents a send operation.
// Normally Chan's underlying value must be a channel, and Send's underlying value must be
// assignable to the channel's element type. As a special case, if Chan is a zero Value,
// then the case is ignored, and the field Send will also be ignored and may be either zero
// or non-zero.
//
// If Dir is SelectRecv, the case represents a receive operation.
// Normally Chan's underlying value must be a channel and Send must be a zero Value.
// If Chan is a zero Value, then the case is ignored, but Send must still be a zero Value.
// When a receive operation is selected, the received Value is returned by Select.
#SelectCase: {
	Dir: #SelectDir
}

_#maxZero: 1024
